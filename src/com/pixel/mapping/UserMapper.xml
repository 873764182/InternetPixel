<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，
	namespace的值习惯上设置成包名+sql映射文件名，
	这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"
	就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) 
-->
<mapper namespace="com.pixel.mapping.UserMapper">
	<!-- 在select标签中编写查询的SQL语句， 
		设置select标签的id属性为getUser，
		id属性值必须是唯一的，
		不能够重复 使用parameterType属性指明查询时使用的参数类型，
		resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示
		将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 
	-->
	
	<!-- 根据id查询得到一个user对象 -->
	<select id="getUser" parameterType="String" resultType="com.pixel.domain.User" resultMap="userResultmap">
		select * from users where _id=#{_id}
	</select>
	
	<!-- 创建用户(Create) -->
    <insert id="addUser" parameterType="com.pixel.domain.User">
        insert into users(_id,account,nickname,password) values(#{_id},#{account},#{nickname},#{password})
   </insert>
   
    <!-- 删除用户(Remove) -->
    <delete id="deleteUser" parameterType="String">
        delete from users where _id=#{_id}
    </delete>
   
    <!-- 修改用户(Update) -->
    <update id="updateUser" parameterType="com.pixel.domain.User" >
         update users set account=#{account},nickname=#{nickname},password=#{password} where _id=#{_id}
    </update>
    
     <!-- 查询全部用户-->
    <select id="getAllUsers" resultType="com.pixel.domain.User" resultMap="userResultmap">
        select * from users
    </select>
    
    <!-- 实体的属性与数据库字段的映射(主要是解决实体字段与数据库字段不一致的问题 Select语句可以使用) -->
    <resultMap type="com.pixel.domain.User" id="userResultmap">
        <id property="_id" column="_id"/>
        <result property="account" column="account"/>
        <result property="nickname" column="nickname"/>
        <result property="password" column="password"/>
    </resultMap>
    
</mapper>